name: Run tests

on: [push]

jobs:
    test-node:
        name: Test on node ${{ matrix.node_version }} and ${{ matrix.database_server }}
        runs-on: ubuntu-latest
        services:
            mysql:
                image: ${{ matrix.database_server }}
                env:
                    MYSQL_DATABASE: wdes_stats__test
                    MYSQL_USER: wdes_stats
                    MYSQL_PASSWORD: testbenchuser
                    MYSQL_ROOT_PASSWORD: testbench
                ports:
                    - "3308:3306"
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        strategy:
            matrix:
                node_version: ["8", "10"]
                database_server: ["mysql:5.7", "mariadb:10.3"]

        steps:
            - uses: actions/checkout@v1
            - name: Use Node.js ${{ matrix.node_version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node_version }}
            - name: Cache module
              uses: actions/cache@v1.0.3
              with:
                  path: ~/.npm/
                  key: npm-cache
            - name: Install modules
              if: matrix.node_version != '8'
              run: npm ci
            - name: Install modules
              if: matrix.node_version == '8'
              run: npm install
            - name: Run node tests
              env:
                  DB_TEST_HOST: 127.0.0.1
                  DB_TEST_USER: wdes_stats
                  DB_TEST_PASS: testbenchuser
                  DB_TEST_PORT: ${{ job.services.mysql.ports['3306'] }}
                  DB_TEST_DB: wdes_stats__test
              run: |
                  npm run test
                  npm run report-coverage
            - name: Send coverage
              uses: codecov/codecov-action@v1
              with:
                  token: ${{ secrets.CODECOV_TOKEN }}

    migrations:
        name: Run migrations up and down on node ${{ matrix.node_version }} and ${{ matrix.database_server }}
        runs-on: ubuntu-latest
        services:
            mysql:
                image: ${{ matrix.database_server }}
                env:
                    MYSQL_DATABASE: wdes_stats__test
                    MYSQL_USER: wdes_stats
                    MYSQL_PASSWORD: testbenchuser
                    MYSQL_ROOT_PASSWORD: testbench
                ports:
                    - "3308:3306"
                options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        strategy:
            matrix:
                node_version: ["8", "10"]
                database_server: ["mysql:5.7", "mariadb:10.3"]

        steps:
            - uses: actions/checkout@v1
            - name: Use Node.js ${{ matrix.node_version }}
              uses: actions/setup-node@v1
              with:
                  node-version: ${{ matrix.node_version }}
            - name: Cache module
              uses: actions/cache@v1.0.3
              with:
                  path: ~/.npm/
                  key: npm-cache
            - name: Install modules
              if: matrix.node_version != '8'
              run: npm ci
            - name: Install modules
              if: matrix.node_version == '8'
              run: npm install
            - name: Run migrations up and down
              env:
                  DB_TEST_HOST: 127.0.0.1
                  DB_TEST_USER: wdes_stats
                  DB_TEST_PASS: testbenchuser
                  DB_TEST_PORT: ${{ job.services.mysql.ports['3306'] }}
                  DB_TEST_DB: wdes_stats__test
              run: |
                  npm run migrate:test
                  npm run migrate:test:reset
